/**
 * @file Defines custom Express middleware functions.
 */

const Boom = require('@hapi/boom');

/**
 * A higher-order function that wraps an async callback to properly trigger the
 * Express error-handling middleware on errors.
 */
const asyncWrapper = fn => (req, res, next) => {
  return Promise.resolve(fn(req, res, next)).catch(next);
};

/**
 * A catch-all error handler that sends a formatted JSON response.
 * Uses Boom to set the status code and provide consistent formatting.
 *
 * If using multiple error handlers, this should be the last one..
 */
const errorHandler = (err, req, res, next) => {
  let error = err;
  console.log(error);

  if (error.response) {
    error = new Boom(error.response.data.error_message, {
      statusCode: error.response.status || 500,
    });
  } else {
    error = new Boom('An unknown error occured', { statusCode: 500 });
  }

  // handle standard javascript errors.
  if (!error.isBoom) error = Boom.boomify(error);

  // these are generated by Boom, so they're guaranteed to exist.
  const { statusCode, payload } = error.output;
  res.status(statusCode).json(payload);
};

module.exports = { asyncWrapper, errorHandler };
